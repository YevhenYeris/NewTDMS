// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewTDBMS.RelationalAdapter;

#nullable disable

namespace NewTDBMS.RelationalAdapter.Migrations
{
    [DbContext(typeof(TDBMSContext))]
    [Migration("20221018193759_ChangeEntities")]
    partial class ChangeEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.ColumnModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DBName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableModelDBName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableModelName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.HasIndex("DBName", "TableName");

                    b.HasIndex("TableModelDBName", "TableModelName");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.DBModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("DBs");
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.RowModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DBName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableModelDBName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableModelName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DBName", "TableName");

                    b.HasIndex("TableModelDBName", "TableModelName");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.RowValueModel", b =>
                {
                    b.Property<string>("DBName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DBName", "TableName", "RowId", "Value");

                    b.HasIndex("RowId");

                    b.ToTable("RowValues");
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.TableModel", b =>
                {
                    b.Property<string>("DBName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DBName", "Name");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.ColumnModel", b =>
                {
                    b.HasOne("NewTDBMS.RelationalAdapter.Models.TableModel", null)
                        .WithMany()
                        .HasForeignKey("DBName", "TableName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewTDBMS.RelationalAdapter.Models.TableModel", null)
                        .WithMany("Columns")
                        .HasForeignKey("TableModelDBName", "TableModelName");
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.RowModel", b =>
                {
                    b.HasOne("NewTDBMS.RelationalAdapter.Models.TableModel", null)
                        .WithMany()
                        .HasForeignKey("DBName", "TableName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewTDBMS.RelationalAdapter.Models.TableModel", null)
                        .WithMany("Rows")
                        .HasForeignKey("TableModelDBName", "TableModelName");
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.RowValueModel", b =>
                {
                    b.HasOne("NewTDBMS.RelationalAdapter.Models.RowModel", null)
                        .WithMany("Values")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.TableModel", b =>
                {
                    b.HasOne("NewTDBMS.RelationalAdapter.Models.DBModel", null)
                        .WithMany("Tables")
                        .HasForeignKey("DBName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.DBModel", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.RowModel", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("NewTDBMS.RelationalAdapter.Models.TableModel", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Rows");
                });
#pragma warning restore 612, 618
        }
    }
}
